# Config file for Stage 4 - Wave Detection

# Name of stage, must be identical with folder name
STAGE_NAME: "stage04_wave_detection"

# The profile name is the key for this parameter configuration.
# Results are stored in output_path/<PROFILE>/ (output_path is defined in settings.py)
PROFILE: "imaging_deep_anesthesia"

# Name of the output file
STAGE_OUTPUT: "waves"

# File format in which all intermediate neo objects are stored
NEO_FORMAT: "nix"

# If True (default), the output file of a stage is created as symbolic link
# to the last block output. If False, a duplicate is created (e.g. for cloud
# application, where sym-links are not supported).
USE_LINK_AS_STAGE_OUTPUT: True

# Plotting parameters
PLOT_TSTART: 0  # in s
PLOT_TSTOP: 10  # in s
PLOT_CHANNELS: [2008, 1559, 4653]   # int or None. default "None" -> randomly selected
PLOT_FORMAT: "png"

# DETECTION BLOCK
##################
# Available Blocks: "trigger_clustering"
DETECTION_BLOCK: "trigger_clustering"

# ADDITIONAL PROPERTIES
#######################
# Available Blocks: "optical_flow", "critical_points", "wave_mode_clustering"
ADDITIONAL_PROPERTIES:  ["wave_mode_clustering", "optical_flow"]

# Wavefront Clustering
######################
# Using sklearn.cluster.DBSCAN
METRIC: "euclidean"
# eps, maximum distance between points to be neigbours
NEIGHBOUR_DISTANCE: 15
MIN_SAMPLES_PER_WAVE: 88
# Factor from time dimension to space dimension in sampling_rate*spatial_scale
TIME_SPACE_RATIO: 11  # i.e. distance between 2 frames corresponds to X pixel

# Optical Flow (Horn-Schunck algorithm)
##############
USE_PHASES: True
# weight of the smoothness constraint over the brightness constancy constraint
ALPHA: 1.5
# maximum number of iterations optimizing the vector field
MAX_NITER: 100
# the optimization end either after MAX_NITER iteration or when the
# maximal change between iterations is smaller than the CONVERGENCE_LIMIT
CONVERGENCE_LIMIT: 0.0001
# standard deviations for the Gaussian filter applied on the vector field
# [t_std, x_std, y_std]. (0,0,0) for no filter
GAUSSIAN_SIGMA: [0.5,5.5,5.5]
# Kernel filter to use to calucualte the spatial derivatives.
# simple_3x3, prewitt_3x3, scharr_3x3, sobel_3x3, sobel_5x5, sobel_7x7
DERIVATIVE_KERNEL: "scharr_3x3"

# Critical Point Clustering
###########################

# Wave Mode Clustering
######################
# fraction of channels that need to be involved in a wave to be included
MIN_TRIGGER_FRACTION: 0.5
# number of similar waves to use to extrapolate missing trigger from
NUM_WAVE_NEIGHBOURS: 5
# percentage of wave similarity to keep for the clustering
WAVE_OUTLIER_QUANTILE: 1 #0.95
# number of pca dims to project the trigger patterns onto before clustering
PCA_DIMS: 10
# number of clusters for the kmeans algorithm
NUM_KMEANS_CLUSTER: 4
# grid spacing for the interpolation [0,1]
INTERPOLATION_STEP_SIZE: 2
# smoothing factor (0: no smoothing)
INTERPOLATION_SMOOTHING: 400

# VIDEO SETTINGS
################
QUALITY: 5 # 0(good) - 31(bad)
SCALE_X: 720
SCALE_Y: 720
FPS: 8
BITRATE: 20M
# displayed sampling rate, the data will be stretched or compressed to.
# If None, the inherent sampling rate is used.
FRAME_RATE: None
# "gray", "viridis" (sequential), "coolwarm" (diverging), "twilight" (cyclic)
COLORMAP: "viridis"
PLOT_EVENT: "wavefronts" # name of neo event to plot, default is None
MARKER_COLOR: "k"
