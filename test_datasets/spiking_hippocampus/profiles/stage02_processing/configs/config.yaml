# Config file for Stage 2 - Processing

# Name of stage, must be identical with folder name
STAGE_NAME: "stage02_processing"

# The profile name is the key for this parameter configuration.
# Results are stored in output_path/<PROFILE>/ (output_path is defined in settings.py)
PROFILE: "spiking_hippocampus"

# Name of the output file
STAGE_OUTPUT: "processed_data"

# File format in which all intermediate neo objects are stored
NEO_FORMAT: "nix"

# If True (default), the output file of a stage is created as symbolic link
# to the last block output. If False, a duplicate is created (e.g. for cloud
# application, where sym-links are not supported).
USE_LINK_AS_STAGE_OUTPUT: False

# Plotting parameters
PLOT_TSTART: "None"  # float (in s) or "None".
PLOT_TSTOP: "None"  # float (in s) or "None".
# If "None" is selected, channels to be plotted are randomly picked
PLOT_CHANNELS: [221]  # "None"  # int or None, default is "None"
PLOT_FORMAT: "png"

# The block order determines which processing steps (blocks) will be applied
# and in which order. Execution order is from first to last entry.
# The available blocks are (in alphabetical order):
#     "background_subtraction", "convolution", "detrending", "frequency_filter",
#     "logMUA_estimation", "normalization", "phase_transform", "roi_selection",
#     "spatial_downsampling", "subsampling", "zscore"
# Default: empty list [] -> it skips any processing blocks and returns the same
# as input but, different from plot obtained from stage01, here the values on
# the y-scale are correctly reported.
BLOCK_ORDER: ["convolution"]

# BLOCK - background_subtraction
#################################
# No parameters needed

# BLOCK - spatial_smoothing
#################################
MACRO_PIXEL_DIM: 2

# BLOCK - hierarchical_spatial_sampling
#################################
# method to use for the exit mode: "consecutive", "voting", "standard"
EXIT_CONDITION: "voting"
# method to evaluate the signal to noise ration of a macro pixel
SIGNAL_EVALUATION_METHOD: "shapiro"
# number of bad nodes in the same branch to meet the exit condition
N_BAD_NODES: 2
# only for "voting" method: threshold fraction of
# "bad children" to keep investigating the tree
VOTING_THRESHOLD: 0.5

# BLOCK - normalization
#######################
# Normalize the data (devide channels-wise) by either:
# "mean", "median", "max"
NORMALIZE_BY: "mean"

# BLOCK - frequency_filter
##########################
# parameters to be passed to the butterworth frequency filter
# function by elephant
HIGHPASS_FREQUENCY: 0  # in Hz
LOWPASS_FREQUENCY: 150  # in Hz
FILTER_ORDER: 2
# filter function used in scipy backend.
# options: "filtfilt", "lfilter", "sosfiltfilt"
FILTER_FUNCTION: "sosfiltfilt"
# Plotting parameters for the power spectrum
PSD_FREQUENCY_RESOLUTION: 5  # in Hz
PSD_OVERLAP: 0.5

# BLOCK - detrending
####################
# Detrending: 0 - mean detrending;
#             1 - mean and slope detrending (linear): this should be the default.
DETRENDING_ORDER: 1

# BLOCK - subsampling
#####################
TARGET_RATE: 200  # in Hz

# BLOCK - roi_selection
###########################
# Threshold below which the pixels are discarded (set to nan).
# Given in percent of the range between minimum and maximum intensity.
INTENSITY_THRESHOLD: 0.01
CROP_TO_SELECTION: False

# BLOCK - logMUA_estimation
########################
MUA_HIGHPASS_FREQUENCY: 50  # in Hz
MUA_LOWPASS_FREQUENCY: 1200  # in Hz
# Rate of the logMUA signal. Must be <= the original sampling rate
# in Hz (default: "None", takes highpass_freq)
logMUA_RATE: 70
# Length of time slice (in s) to estimate the local power spectrum
# default "None", takes minimum number of samples determined
# by the lower bound of the frequency band
FFT_SLICE: 0.1
# PSD_OVERLAP: determined by setting in block frequency_filter

# BLOCK - convolution
####################
# Allowed types of kernels: ["gaussian","biexponential"]
KERNEL_TYPE: "gaussian"
KERNEL_PARAMS:
    sampling_rate_Hz: 1000
    #tau_rise: 5
    #tau_decay: 20
    std_dev_ms: 5
    #duration_ms: 50
